"use strict";(self.webpackChunkaidbox_develop_starter_guide=self.webpackChunkaidbox_develop_starter_guide||[]).push([[554],{6351:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:1,title:"Tutorial"},i="aidbox-develop-starter-guide",s={unversionedId:"tutorial",id:"tutorial",title:"Tutorial",description:"Intro",source:"@site/docs/tutorial.md",sourceDirName:".",slug:"/tutorial",permalink:"/docs/tutorial",draft:!1,editUrl:"https://github.com/beda-software/aidbox-develop-starter-guide/docs/tutorial.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Tutorial"},sidebar:"tutorialSidebar"},l={},p=[{value:"Intro",id:"intro",level:2},{value:"Features",id:"features",level:2},{value:"Setup",id:"setup",level:2},{value:"Aidbox project",id:"aidbox-project",level:3},{value:"React app",id:"react-app",level:3},{value:"Components",id:"components",level:2},{value:"Aidbox types",id:"aidbox-types",level:2},{value:"Services",id:"services",level:2},{value:"<code>service({...axiosConfig})</code>",id:"serviceaxiosconfig",level:2},{value:"<code>useService</code>",id:"useservice",level:2},{value:"<code>RenderRemoteData</code>",id:"renderremotedata",level:2},{value:"Approach to stylization",id:"approach-to-stylization",level:2},{value:"Component.module.scss",id:"componentmodulescss",level:3},{value:"Ant Design",id:"ant-design",level:3},{value:"SignIn",id:"signin",level:2},{value:"Utils",id:"utils",level:2},{value:"Prepare components",id:"prepare-components",level:2},{value:"AppHeader",id:"appheader",level:3},{value:"PatientsListTable",id:"patientslisttable",level:3},{value:"ObservationsListTable",id:"observationslisttable",level:3},{value:"ObservationDetails",id:"observationdetails",level:3},{value:"Get and show resources",id:"get-and-show-resources",level:2},{value:"Patients list",id:"patients-list",level:3},{value:"<code>getFHIRResources</code>",id:"getfhirresources",level:3},{value:"<code>mapSuccess</code>",id:"mapsuccess",level:3},{value:"<code>extractBundleResources</code>",id:"extractbundleresources",level:3},{value:"Observations list",id:"observations-list",level:3},{value:"<code>getFHIRResource</code>",id:"getfhirresource",level:3},{value:"<code>sequenceMap</code>",id:"sequencemap",level:3},{value:"Create and update resources",id:"create-and-update-resources",level:2},{value:"Aidbox REST Console",id:"aidbox-rest-console",level:3},{value:"Create Patient resource",id:"create-patient-resource",level:3},{value:"<code>saveFHIRResource</code>",id:"savefhirresource",level:3},{value:"Create Observation resource",id:"create-observation-resource",level:3},{value:"Summary",id:"summary",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"aidbox-develop-starter-guide"},"aidbox-develop-starter-guide"),(0,o.kt)("h2",{id:"intro"},"Intro"),(0,o.kt)("p",null,"Welcome to the tutorial! In this tutorial, we will be creating a MVP application\nfor doctors in laboratories to use for determining hemoglobin levels. Hemoglobin is a protein found in the blood that is responsible for transporting oxygen throughout the body. It is measured in units per deciliter of blood (g/dL)."),(0,o.kt)("h2",{id:"features"},"Features"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Getting the ",(0,o.kt)("a",{parentName:"li",href:"https://www.hl7.org/fhir/patient.html"},"Patient")," resource list"),(0,o.kt)("li",{parentName:"ul"},"Create a Patient resource"),(0,o.kt)("li",{parentName:"ul"},"Getting a list of ",(0,o.kt)("a",{parentName:"li",href:"https://www.hl7.org/fhir/observation.html"},"Observation"),"\nresources for the specified patient"),(0,o.kt)("li",{parentName:"ul"},"Creating an Observation resource")),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"Create a directory with any name, in the tutorial it will be called ",(0,o.kt)("inlineCode",{parentName:"p"},"main-directory"),"."),(0,o.kt)("h3",{id:"aidbox-project"},"Aidbox project"),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"main-directory"),", create and launch an ",(0,o.kt)("a",{parentName:"p",href:"https://www.health-samurai.io/aidbox"},"Aidbox application")," by following the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aidbox.app/getting-started/run-aidbox-locally-with-docker"},"guide on the official Aidbox documentation site"),"."),(0,o.kt)("p",null,"Let's add some improvements to the application's aidbox port and project structure:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Rename ",(0,o.kt)("inlineCode",{parentName:"li"},"aidbox-docker-compose")," directory to ",(0,o.kt)("inlineCode",{parentName:"li"},"aidbox-project")),(0,o.kt)("li",{parentName:"ul"},"Replace aidbox port in the .env file:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"...\n- AIDBOX_PORT=8888\n+ AIDBOX_PORT=8080\n...\n")),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"aidbox-project/zrc/system.edn")," file replace ",(0,o.kt)("inlineCode",{parentName:"p"},'["client_credentials" "basic"]'),"with"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},'["client_credentials" "password"]'),"."),(0,o.kt)("h3",{id:"react-app"},"React app"),(0,o.kt)("p",null,"Next, in the ",(0,o.kt)("inlineCode",{parentName:"p"},"main-directory")," create a React application with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn create react-app frontend --template typescript\n")),(0,o.kt)("p",null,"You should end up with this file structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"main-directory\n\u251c\u2500\u2500 aidbox-project\n\u2502   \u251c\u2500\u2500 docker-compose.yaml\n\u2502   \u251c\u2500\u2500 .env\n\u2502   \u251c\u2500\u2500 pgdata\n\u2502   \u251c\u2500\u2500 zen-package.edn\n\u2502   \u2514\u2500\u2500 zrc\n\u2514\u2500\u2500 frontend\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 node_modules\n    \u251c\u2500\u2500 package.json\n    \u251c\u2500\u2500 public\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 src\n    \u251c\u2500\u2500 tsconfig.json\n    \u2514\u2500\u2500 yarn.lock\n")),(0,o.kt)("p",null,"Delete unused files in ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend/src/")," so all you have left are these:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"src\n\u251c\u2500\u2500 App.tsx\n\u251c\u2500\u2500 index.css\n\u251c\u2500\u2500 index.tsx\n\u2514\u2500\u2500 react-app-env.d.ts\n")),(0,o.kt)("p",null,"Replace the code in ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx")," with the code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"export function App() {\n    return <div>App</div>;\n}\n")),(0,o.kt)("p",null,"Replace the code in ",(0,o.kt)("inlineCode",{parentName:"p"},"index.tsx")," with the code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { App } from './App';\nimport './index.css';\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n);\n")),(0,o.kt)("p",null,"Add Typescript settings by creating a file ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "compilerOptions": {\n        "target": "es5",\n        "lib": ["dom", "dom.iterable", "esnext"],\n        "allowJs": true,\n        "skipLibCheck": true,\n        "esModuleInterop": true,\n        "allowSyntheticDefaultImports": true,\n        "strict": true,\n        "forceConsistentCasingInFileNames": true,\n        "noFallthroughCasesInSwitch": true,\n        "module": "esnext",\n        "moduleResolution": "node",\n        "resolveJsonModule": true,\n        "isolatedModules": true,\n        "noEmit": true,\n        "jsx": "react-jsx"\n    },\n    "include": ["src"]\n}\n')),(0,o.kt)("p",null,"Add the prettier package with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add prettier\n")),(0,o.kt)("p",null,"Create a ",(0,o.kt)("inlineCode",{parentName:"p"},".prettierrc.js")," file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," directory, with the contents:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n    bracketSpacing: true,\n    jsxBracketSameLine: false,\n    singleQuote: true,\n    trailingComma: 'all',\n    tabWidth: 4,\n    arrowParens: 'always',\n    printWidth: 100,\n    jsxSingleQuote: false,\n};\n")),(0,o.kt)("p",null,"Add a script to ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," to format all the files:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n  ...\n+ "format": "npx prettier --write ."\n  ...\n},\n')),(0,o.kt)("p",null,"Format all files with a command in the console:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run format\n")),(0,o.kt)("p",null,"Create new directories in the ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," directory:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"components")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"containers")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"services")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"types")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"utils"))),(0,o.kt)("p",null,"As a result, our structure will look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"main-directory/\n\u251c\u2500\u2500 aidbox-project/\n\u2502   \u251c\u2500\u2500 docker-compose.yaml\n\u2502   \u251c\u2500\u2500 .env\n\u2502   \u251c\u2500\u2500 .git/\n\u2502   \u251c\u2500\u2500 pgdata/\n\u2502   \u251c\u2500\u2500 zen-package.edn\n\u2502   \u2514\u2500\u2500 zrc/\n\u2514\u2500\u2500 frontend/\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 node_modules/\n    \u251c\u2500\u2500 package.json\n    \u251c\u2500\u2500 .prettierrc.js\n    \u251c\u2500\u2500 .tsconfig.json\n    \u251c\u2500\u2500 public/\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 src/\n    \u2502   \u251c\u2500\u2500 App.tsx\n    \u2502   \u251c\u2500\u2500 components/\n    \u2502   \u251c\u2500\u2500 containers/\n    \u2502   \u251c\u2500\u2500 index.css\n    \u2502   \u251c\u2500\u2500 index.tsx\n    \u2502   \u251c\u2500\u2500 react-app-env.d.ts\n    \u2502   \u251c\u2500\u2500 services/\n    \u2502   \u251c\u2500\u2500 types/\n    \u2502   \u2514\u2500\u2500 utils/\n    \u251c\u2500\u2500 tsconfig.json\n    \u2514\u2500\u2500 yarn.lock\n")),(0,o.kt)("h2",{id:"components"},"Components"),(0,o.kt)("p",null,"It is common to separate the components into ",(0,o.kt)("inlineCode",{parentName:"p"},"smart")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"dumb"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"smart")," components are placed in the directory ",(0,o.kt)("inlineCode",{parentName:"li"},"containers"),"."),(0,o.kt)("li",{parentName:"ul"},"Put ",(0,o.kt)("inlineCode",{parentName:"li"},"dumb")," components in the directory ",(0,o.kt)("inlineCode",{parentName:"li"},"components"),".")),(0,o.kt)("p",null,"In the directory ",(0,o.kt)("inlineCode",{parentName:"p"},"containers")," create a directory ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," and put there ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx")," component.\nRename it to ",(0,o.kt)("inlineCode",{parentName:"p"},"index.tsx"),"."),(0,o.kt)("p",null,"For routing, we will use the ",(0,o.kt)("a",{parentName:"p",href:"https://reactrouter.com/"},"React Router")," library."),(0,o.kt)("p",null,"For faster development we will also use the ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/"},"Ant Design")," component library."),(0,o.kt)("p",null,"The main tool this tutorial aims to study is the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/aidbox-react"},"aidbox-react")," library."),(0,o.kt)("p",null,"Add these packages:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add aidbox-react react-router-dom antd\n")),(0,o.kt)("p",null,'There will be 3 "smart" components in the application:'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"App"),(0,o.kt)("li",{parentName:"ul"},"Patients list"),(0,o.kt)("li",{parentName:"ul"},"Observations list")),(0,o.kt)("p",null,"Create the ",(0,o.kt)("inlineCode",{parentName:"p"},"PatientsList")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ObservationsList")," containers in the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/containers")," directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"containers\n\u251c\u2500\u2500 App\n\u2502   \u251c\u2500\u2500 index.tsx\n\u251c\u2500\u2500 PatientsList\n\u2502   \u251c\u2500\u2500 index.tsx\n\u2514\u2500\u2500 ObservationsList\n    \u251c\u2500\u2500 index.tsx\n")),(0,o.kt)("p",null,"Create components ",(0,o.kt)("inlineCode",{parentName:"p"},"SignIn"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"AlertFailure"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Loader")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"src/components")," directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"components\n\u251c\u2500\u2500 SignIn\n\u2502   \u251c\u2500\u2500 index.tsx\n\u251c\u2500\u2500 AlertFailure\n\u2502   \u251c\u2500\u2500 index.tsx\n\u2514\u2500\u2500 Loader\n    \u251c\u2500\u2500 index.tsx\n")),(0,o.kt)("h2",{id:"aidbox-types"},"Aidbox types"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/beda-software/aidbox-ts-generator"},"aidbox-ts-generator")," utility generates a file with TypeScript types for FHIR resources."),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"types")," directory, create a file ",(0,o.kt)("inlineCode",{parentName:"p"},"aidbox.ts")," and put the following ",(0,o.kt)("a",{parentName:"p",href:"https://gist.githubusercontent.com/atuonufure/185cea02866703405696b35493128a00/raw/82c142cf24dccc8078d7fe88ca3c7cf025564715/index.ts"},"code with types")," in it."),(0,o.kt)("h2",{id:"services"},"Services"),(0,o.kt)("p",null,"Create files ",(0,o.kt)("inlineCode",{parentName:"p"},"initialize.ts"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"config.ts")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"auth.ts")," in directory ",(0,o.kt)("inlineCode",{parentName:"p"},"services"),"."),(0,o.kt)("p",null,"Add the following code to ",(0,o.kt)("inlineCode",{parentName:"p"},"config.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export default {\n    clientId: 'client',\n    tier: 'develop',\n    baseURL: 'http://localhost:8080',\n};\n")),(0,o.kt)("p",null,"This is the configuration file that will specify the settings for accessing the Aidbox application."),(0,o.kt)("p",null,"Add the following code to ",(0,o.kt)("inlineCode",{parentName:"p"},"initialize.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { setInstanceBaseURL } from 'aidbox-react/lib/services/instance';\n\nimport config from './config';\n\nexport function init(baseURL?: string) {\n    setInstanceBaseURL(baseURL ?? config.baseURL);\n}\n")),(0,o.kt)("p",null,"With the ",(0,o.kt)("inlineCode",{parentName:"p"},"init")," function we will set the url to which the requests will be sent."),(0,o.kt)("p",null,"Add the following code to ",(0,o.kt)("inlineCode",{parentName:"p"},"auth.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { service } from 'aidbox-react/lib/services/service';\nimport { RemoteDataResult } from 'aidbox-react/lib/libs/remoteData';\nimport { User } from '../types/aidbox';\n\nexport function getToken() {\n    return window.localStorage.getItem('token') || undefined;\n}\n\nexport function setToken(token: string) {\n    window.localStorage.setItem('token', token);\n}\n\nexport function removeToken() {\n    window.localStorage.removeItem('token');\n}\n\nexport function logout() {\n    removeToken();\n    return service({\n        method: 'DELETE',\n        url: '/Session',\n    });\n}\n\nexport function getUserInfo() {\n    return service<User>({\n        method: 'GET',\n        url: '/auth/userinfo',\n    });\n}\n\nexport interface SigninBody {\n    email: string;\n    password: string;\n}\n\nexport function signin(data: SigninBody): Promise<RemoteDataResult> {\n    return service({\n        url: '/auth/token',\n        method: 'POST',\n        data: {\n            username: data.email,\n            password: data.password,\n            client_id: 'client',\n            grant_type: 'password',\n        },\n    });\n}\n")),(0,o.kt)("p",null,"The functions in the ",(0,o.kt)("inlineCode",{parentName:"p"},"auth.ts")," file are used to manage the user's session, to get information about the user, and to log the user in or out of the application."),(0,o.kt)("h2",{id:"serviceaxiosconfig"},(0,o.kt)("inlineCode",{parentName:"h2"},"service({...axiosConfig})")),(0,o.kt)("p",null,"This is a utility function that is used to make HTTP requests to an Aidbox server."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"service")," function returns a Promise that resolves to a ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteDataResult")," object."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteDataResult"),' object can be in one of states: "not asked", "loading", or "success/failure".'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If the ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteDataResult"),' object is in the "not asked" state, it means that the asynchronous operation has not yet been initiated.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If the ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteDataResult"),' object is in the "loading" state, it means that the asynchronous operation is in progress.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If the ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteDataResult"),' object is in the "success/failure" state, it means that the asynchronous operation has completed. If the operation was successful, the ',(0,o.kt)("inlineCode",{parentName:"p"},"RemoteDataResult")," object will have a data property containing the response data. If the operation failed, the ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteDataResult")," object will have an error property containing an error object."))),(0,o.kt)("p",null,"The aidbox-react library provides utility functions like ",(0,o.kt)("inlineCode",{parentName:"p"},"isSuccess"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"isFailure")," that you can use to check the state of a ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteDataResult")," object and take appropriate action based on the state."),(0,o.kt)("p",null,"Here is an example of how the ",(0,o.kt)("inlineCode",{parentName:"p"},"service")," function can be used:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { service } from 'aidbox-react/lib/services/service';\n\nconst result = await service({\n    method: 'GET',\n    url: '/Patient',\n});\n\nif (isSuccess(result)) {\n    // The request was successful, and the response data is available in result.data\n    console.log(result.data);\n} else if (isFailure(result)) {\n    // The request failed, and the error is available in result.error\n    console.error(result.error);\n}\n")),(0,o.kt)("h2",{id:"useservice"},(0,o.kt)("inlineCode",{parentName:"h2"},"useService")),(0,o.kt)("p",null,"In most cases, we put the logic into custom hooks for better readability, reuse and testing."),(0,o.kt)("p",null,"Create a file ",(0,o.kt)("inlineCode",{parentName:"p"},"hooks.ts")," in the directory ",(0,o.kt)("inlineCode",{parentName:"p"},"containers/App"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { useService } from 'aidbox-react/lib/hooks/service';\nimport { isSuccess, success } from 'aidbox-react/lib/libs/remoteData';\nimport { resetInstanceToken, setInstanceToken } from 'aidbox-react/lib/services/instance';\nimport { extractErrorCode } from 'aidbox-react/lib/utils/error';\nimport { getToken, getUserInfo } from '../../services/auth';\n\nexport function useApp() {\n    const [userResponse] = useService(async () => {\n        const appToken = getToken();\n        if (!appToken) {\n            return success(null);\n        }\n        setInstanceToken({ access_token: appToken, token_type: 'Bearer' });\n        const response = await getUserInfo();\n        if (isSuccess(response)) {\n        } else {\n            if (extractErrorCode(response.error) !== 'network_error') {\n                resetInstanceToken();\n                return success(null);\n            }\n        }\n        return response;\n    });\n\n    return { userResponse };\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"useService")," hook is a utility provided by the aidbox-react library that allows easily make HTTP requests from a React component and manage the state of the request. It is similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," hook in that it will execute a function when certain dependencies change, but it is specifically designed for making HTTP requests."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"useService"),' hook takes an async function as an argument, which should contain the logic for making the HTTP request. The hook will handle setting the component\'s state to "loading" while the request is in progress, and will update the state with the response data or error if the request succeeds or fails.'),(0,o.kt)("h2",{id:"renderremotedata"},(0,o.kt)("inlineCode",{parentName:"h2"},"RenderRemoteData")),(0,o.kt)("p",null,"Next, change the code in `App.tsx':"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { RenderRemoteData } from 'aidbox-react/lib/components/RenderRemoteData';\nimport { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom';\nimport { AlertFailure } from '../../components/AlertFailure';\nimport { Loader } from '../../components/Loader';\nimport { SignIn } from '../../components/SignIn';\nimport { ObservationsList } from '../ObservationsList';\nimport { PatientsList } from '../PatientsList';\nimport { useApp } from './hooks';\n\nexport function App() {\n    const { userResponse } = useApp();\n\n    return (\n        <BrowserRouter>\n            <RenderRemoteData\n                remoteData={userResponse}\n                renderFailure={() => <AlertFailure />}\n                renderLoading={() => <Loader />}\n            >\n                {(user) => (\n                    <Routes>\n                        {user ? (\n                            <>\n                                <Route path=\"patients\" element={<PatientsList />} />\n                                <Route path=\"patients/:patientId/\" element={<ObservationsList />} />\n                                <Route path=\"*\" element={<Navigate to=\"/patients\" />} />\n                            </>\n                        ) : (\n                            <>\n                                <Route path=\"signin\" element={<SignIn />} />\n                                <Route path=\"*\" element={<Navigate to=\"/signin\" />} />\n                            </>\n                        )}\n                    </Routes>\n                )}\n            </RenderRemoteData>\n        </BrowserRouter>\n    );\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"RenderRemoteData")," component is used to render different content depending on the state of the ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," object."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"RenderRemoteData")," component takes several parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"remoteData"),": this parameter represents a ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," object.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"renderFailure"),": this parameter represents a function that returns the component if the ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," object is in ",(0,o.kt)("inlineCode",{parentName:"p"},"Failure")," state. In this case, the ",(0,o.kt)("inlineCode",{parentName:"p"},"renderFailure")," property is a function that returns the ",(0,o.kt)("inlineCode",{parentName:"p"},"AlertFailure")," component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"renderLoading"),": This parameter is a function that returns the component if the ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," object is in the ",(0,o.kt)("inlineCode",{parentName:"p"},"loading")," state. In this case, the ",(0,o.kt)("inlineCode",{parentName:"p"},"renderLoading")," property is a function that returns the ",(0,o.kt)("inlineCode",{parentName:"p"},"Loader")," component."))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"RenderRemoteData")," component also has a child parameter, which is a function that returns the component if the ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," object is in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Success")," state."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," is a wrapper over data."),(0,o.kt)("p",null,"It could have four statuses:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Success"),(0,o.kt)("li",{parentName:"ul"},"Failure"),(0,o.kt)("li",{parentName:"ul"},"Loading"),(0,o.kt)("li",{parentName:"ul"},"NotAsked")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"RemoteDataResult")," is a subset of ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," and it could have two statuses:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Success"),(0,o.kt)("li",{parentName:"ul"},"Failure")),(0,o.kt)("p",null,"When we make a request to a server with any of ",(0,o.kt)("inlineCode",{parentName:"p"},"aidbox-react")," methods, we'll probably get ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," as a result. Then we can easily check what've got."),(0,o.kt)("h2",{id:"approach-to-stylization"},"Approach to stylization"),(0,o.kt)("p",null,"Add the sass package with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add sass\n")),(0,o.kt)("h3",{id:"componentmodulescss"},"Component.module.scss"),(0,o.kt)("p",null,"In the directory of the component ",(0,o.kt)("inlineCode",{parentName:"p"},"AlertFailure"),", create a file ",(0,o.kt)("inlineCode",{parentName:"p"},"AlertFailure.module.scss"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scss"},".space {\n    width: 100%;\n    padding: 10px;\n}\n")),(0,o.kt)("p",null,"We use a modular design approach, which involves creating ",(0,o.kt)("inlineCode",{parentName:"p"},"*.module.scss")," files to organize and structure styles, because it promotes reuse and creation of self-contained components, helps prevent unexpected side effects, and allows us to take advantage of advanced SCSS features and capabilities."),(0,o.kt)("h3",{id:"ant-design"},"Ant Design"),(0,o.kt)("p",null,"Add the following code to the ",(0,o.kt)("inlineCode",{parentName:"p"},"AlertFailure")," component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Alert, Space } from 'antd';\nimport s from './AlertFailure.module.scss';\n\ninterface AlertFailureProps {\n    error: any;\n}\n\nexport function AlertFailure({ error }: AlertFailureProps) {\n    return (\n        <Space direction=\"vertical\" className={s.space}>\n            <Alert message={JSON.stringify(error)} type=\"error\" />\n        </Space>\n    );\n}\n")),(0,o.kt)("p",null,"We use the ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/"},"Ant Design")," it provides us with a library of pre-designed and consistent user interface components that are easy to use and configure. The key feature of choosing Antd is that it best meets our needs for out-of-the-box components compared to other libraries."),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx")," change the code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"...\n            <RenderRemoteData\n                remoteData={userResponse}\n                renderFailure={(error) => <AlertFailure error={error} />}\n                renderLoading={() => <Loader />}\n            >\n...\n")),(0,o.kt)("p",null,"Change the ",(0,o.kt)("inlineCode",{parentName:"p"},"Loader")," component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Spin } from 'antd';\nimport s from './Loader.module.scss';\n\nexport function Loader() {\n    return (\n        <div className={s.container}>\n            <Spin />\n        </div>\n    );\n}\n")),(0,o.kt)("p",null,"Also add the styles ",(0,o.kt)("inlineCode",{parentName:"p"},"Loader.module.scss")," to it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scss"},".container {\n    text-align: center;\n    width: 100%;\n}\n")),(0,o.kt)("h2",{id:"signin"},"SignIn"),(0,o.kt)("p",null,"Add the following code to the ",(0,o.kt)("inlineCode",{parentName:"p"},"SignIn")," component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Button, Form, Input, Space, Typography } from \'antd\';\nimport { useSignIn } from \'./useSignIn\';\nimport s from \'./SignIn.module.scss\';\n\nexport function SignIn() {\n    const { onFinish, onFinishFailed } = useSignIn();\n\n    const { Text } = Typography;\n\n    return (\n        <Space>\n            <Form\n                name="basic"\n                initialValues={{ remember: true }}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete="off"\n                className={s.form}\n            >\n                <Text>Username</Text>\n                <Form.Item\n                    name="email"\n                    rules={[{ required: true, message: \'Please input your username!\' }]}\n                >\n                    <Input placeholder="username" />\n                </Form.Item>\n                <Text>Password</Text>\n                <Form.Item\n                    name="password"\n                    rules={[{ required: true, message: \'Please input your password!\' }]}\n                >\n                    <Input.Password placeholder="password" />\n                </Form.Item>\n                <Form.Item>\n                    <Button type="primary" htmlType="submit">\n                        Login\n                    </Button>\n                </Form.Item>\n            </Form>\n        </Space>\n    );\n}\n')),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"SignIn")," directory create a hook ",(0,o.kt)("inlineCode",{parentName:"p"},"useSignIn.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { isSuccess } from 'aidbox-react/lib/libs/remoteData';\nimport { notification } from 'antd';\n\nimport { setToken, signin, SigninBody } from '../../services/auth';\n\nexport function useSignIn() {\n    const onFinish = async (values: SigninBody) => {\n        const signinResponse = await signin(values);\n        if (isSuccess(signinResponse)) {\n            const { access_token } = signinResponse.data;\n            setToken(access_token);\n            window.location.reload();\n        } else {\n            notification.error({\n                message: signinResponse.error.error_description\n                    ? signinResponse.error.error_description\n                    : JSON.stringify(signinResponse.error),\n            });\n        }\n    };\n\n    const onFinishFailed = (errorInfo: any) => {\n        console.warn('Login error: ', errorInfo);\n    };\n\n    return { onFinish, onFinishFailed };\n}\n")),(0,o.kt)("p",null,"Also add the styles ",(0,o.kt)("inlineCode",{parentName:"p"},"SignIn.module.scss"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scss"},".form {\n    margin: 10px;\n}\n")),(0,o.kt)("h2",{id:"utils"},"Utils"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"utils")," directory is normally used to store utility functions and other service code used in the project."),(0,o.kt)("p",null,"Let's add the ",(0,o.kt)("inlineCode",{parentName:"p"},"date-fns")," library to make working with date more convenient:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add date-fns\n")),(0,o.kt)("p",null,"Create a file ",(0,o.kt)("inlineCode",{parentName:"p"},"date.ts")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"utils")," directory with the contents:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { format, parseISO } from 'date-fns';\n\nconst US_DATE_TIME_FORMAT = 'MM-dd-yyyy HH:mm';\n\nconst formatFHIRDate = (date: string, formatType: string) => {\n    try {\n        return format(parseISO(date), formatType);\n    } catch {\n        console.error(`Invalid date format: ${date}`);\n        return String(date);\n    }\n};\n\nexport const formatHumanDateTime = (date: string) => {\n    return formatFHIRDate(date, US_DATE_TIME_FORMAT);\n};\n\nexport const formatHumanDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return format(date, 'yyyy-MM-dd');\n};\n")),(0,o.kt)("h2",{id:"prepare-components"},"Prepare components"),(0,o.kt)("p",null,"Prepare ",(0,o.kt)("inlineCode",{parentName:"p"},"dump")," components:"),(0,o.kt)("h3",{id:"appheader"},"AppHeader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Button, Space } from 'antd';\nimport s from './AppHeader.module.scss';\nimport { useAppHeader } from './useAppHeader';\n\ninterface AppHeaderProps {\n    children?: JSX.Element;\n}\n\nexport function AppHeader({ children }: AppHeaderProps) {\n    const { onLogout } = useAppHeader();\n    return (\n        <Space size=\"middle\" className={s.container}>\n            {children}\n            <Button key=\"logout\" onClick={onLogout}>\n                Logout\n            </Button>\n        </Space>\n    );\n}\n")),(0,o.kt)("p",null,"Hook ",(0,o.kt)("inlineCode",{parentName:"p"},"useAppHeader.ts")," for ",(0,o.kt)("inlineCode",{parentName:"p"},"AppHeader"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { logout } from '../../services/auth';\n\nexport function useAppHeader() {\n    const onLogout = () => {\n        logout();\n        window.location.reload();\n    };\n\n    return {\n        onLogout,\n    };\n}\n")),(0,o.kt)("p",null,"Styles for ",(0,o.kt)("inlineCode",{parentName:"p"},"AppHeader"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scss"},".container {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    padding: 10px;\n}\n")),(0,o.kt)("h3",{id:"patientslisttable"},"PatientsListTable"),(0,o.kt)("p",null,"Create a component ",(0,o.kt)("inlineCode",{parentName:"p"},"PatientsListTable")," that displays a list of patients:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Table, Typography } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { Patient } from '../../types/aidbox';\nimport { formatHumanDateTime } from '../../utils/date';\n\ninterface PatientsListTableProps {\n    patientsList: Patient[];\n}\n\nexport function PatientsListTable({ patientsList }: PatientsListTableProps) {\n    const navigate = useNavigate();\n\n    const goToPatientData = (patient: Patient) => navigate(`/patients/${patient.id}`);\n\n    const { Link } = Typography;\n\n    const dataSource = patientsList.map((patient: Patient) => {\n        return {\n            key: patient.id,\n            patient: (\n                <Link onClick={() => goToPatientData(patient)}>\n                    {patient.name ? String(patient.name[0].family) : patient.id}\n                </Link>\n            ),\n            lastUpdated: formatHumanDateTime(patient.meta?.lastUpdated || ''),\n        };\n    });\n\n    const columns = [\n        {\n            title: <b>Patient</b>,\n            dataIndex: 'patient',\n            key: 'patient',\n            width: '50%',\n        },\n        {\n            title: <b>Last updated</b>,\n            dataIndex: 'lastUpdated',\n            key: 'lastUpdated',\n            width: '50%',\n        },\n    ];\n\n    return <Table dataSource={dataSource} columns={columns} bordered />;\n}\n")),(0,o.kt)("h3",{id:"observationslisttable"},"ObservationsListTable"),(0,o.kt)("p",null,"Create a component that displays the observations list for the patient:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Table } from 'antd';\nimport { Observation } from '../../types/aidbox';\nimport { formatHumanDateTime } from '../../utils/date';\n\ninterface ObservationsListTableProps {\n    observationsList: Observation[];\n}\n\nexport function ObservationsListTable({ observationsList }: ObservationsListTableProps) {\n    const dataSource = observationsList.map((observation) => {\n        return {\n            key: observation.id,\n            observation: observation.value?.Quantity?.value,\n            unit: observation.value?.Quantity?.unit,\n            dateTime: formatHumanDateTime(observation.effective?.dateTime || ''),\n            lastUpdated: formatHumanDateTime(observation.meta?.lastUpdated || ''),\n        };\n    });\n\n    const columns = [\n        {\n            title: <b>Value</b>,\n            dataIndex: 'observation',\n            key: 'observation',\n            width: '25%',\n        },\n        {\n            title: <b>Unit</b>,\n            dataIndex: 'unit',\n            key: 'unit',\n            width: '25%',\n        },\n        {\n            title: <b>Date & Time</b>,\n            dataIndex: 'dateTime',\n            key: 'dateTime',\n            width: '25%',\n        },\n        {\n            title: <b>Last updated</b>,\n            dataIndex: 'lastUpdated',\n            key: 'lastUpdated',\n            width: '25%',\n        },\n    ];\n\n    return <Table dataSource={dataSource} columns={columns} bordered />;\n}\n")),(0,o.kt)("h3",{id:"observationdetails"},"ObservationDetails"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Space, Typography } from 'antd';\nimport { Observation, Patient } from '../../types/aidbox';\nimport { ObservationsListTable } from '../ObservationsListTable';\nimport s from './ObservationsDetails.module.scss';\n\ninterface ObservationsDetailsProps {\n    showObservationModal: boolean;\n    setShowObservationModal: (showObservationModal: boolean) => void;\n    patient: Patient;\n    observationsList: Observation[];\n    reloadObservationsList: () => void;\n}\n\nexport function ObservationsDetails({\n    showObservationModal,\n    setShowObservationModal,\n    patient,\n    observationsList,\n    reloadObservationsList,\n}: ObservationsDetailsProps) {\n    const { Text } = Typography;\n\n    return (\n        <>\n            <Space size=\"middle\" className={s.space}>\n                <Text code>patient: {patient.name?.[0].family}</Text>\n                <Text code>code: Hemoglobin [Mass/volume] in Blood (LOINC#718-7)</Text>\n            </Space>\n            <div className={s.table}>\n                <ObservationsListTable observationsList={observationsList} />\n            </div>\n        </>\n    );\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scss"},".space {\n    margin: 0 10px;\n}\n\n.table {\n    margin: 10px;\n}\n")),(0,o.kt)("h2",{id:"get-and-show-resources"},"Get and show resources"),(0,o.kt)("h3",{id:"patients-list"},"Patients list"),(0,o.kt)("p",null,"Let's update the PatientsList container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { RenderRemoteData } from 'aidbox-react/lib/components/RenderRemoteData';\nimport { Button } from 'antd';\nimport { AddPatientModal } from '../../components/AddPatientModal';\nimport { AlertFailure } from '../../components/AlertFailure';\nimport { AppHeader } from '../../components/AppHeader';\nimport { Loader } from '../../components/Loader';\nimport { PatientsListTable } from '../../components/PatientsListTable';\nimport { usePatientsList } from './hooks';\nimport s from './PatientsList.module.scss';\n\nexport function PatientsList() {\n    const { showPatientModal, setShowPatientModal, patientsRD, reloadPatientsList } =\n        usePatientsList();\n\n    return (\n        <>\n            <AppHeader>\n                <Button\n                    key=\"create-patient\"\n                    onClick={() => setShowPatientModal(true)}\n                    type={'primary'}\n                >\n                    Create patient\n                </Button>\n            </AppHeader>\n            <AddPatientModal\n                showPatientModal={showPatientModal}\n                setShowPatientModal={setShowPatientModal}\n                reloadPatientsList={reloadPatientsList}\n            />\n            <RenderRemoteData\n                remoteData={patientsRD}\n                renderFailure={(error) => <AlertFailure error={error} />}\n                renderLoading={() => <Loader />}\n            >\n                {(data) => (\n                    <div className={s.table}>\n                        <PatientsListTable patientsList={data} />\n                    </div>\n                )}\n            </RenderRemoteData>\n        </>\n    );\n}\n")),(0,o.kt)("h3",{id:"getfhirresources"},(0,o.kt)("inlineCode",{parentName:"h3"},"getFHIRResources")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"getFHIRResources")," function allows easily retrieve a list of FHIR resources from an Aidbox instance."),(0,o.kt)("h3",{id:"mapsuccess"},(0,o.kt)("inlineCode",{parentName:"h3"},"mapSuccess")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"mapSuccess")," function allows transform the data of a successful RemoteDataResult object. It can be useful when you want to transform the data returned by an async function before it is consumed by a component, without having to check the state of the RemoteDataResult object in the component itself."),(0,o.kt)("h3",{id:"extractbundleresources"},(0,o.kt)("inlineCode",{parentName:"h3"},"extractBundleResources")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"extractBundleResources")," is a utility function that takes a FHIR Bundle resource and extracts the individual resources that are contained within it. The function returns an object with keys for each resource type, and the value for each key is an array of resources of that type."),(0,o.kt)("p",null,"For example, if the Bundle resource contains 2 Patient resources and 3 Observation resources, the returned object would look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  Patient: [patient1, patient2],\n  Observation: [observation1, observation2, observation3]\n}\n")),(0,o.kt)("p",null,"Create a file ",(0,o.kt)("inlineCode",{parentName:"p"},"hooks.ts")," for ",(0,o.kt)("inlineCode",{parentName:"p"},"PatientsList"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { useService } from 'aidbox-react/lib/hooks/service';\nimport { extractBundleResources, getFHIRResources } from 'aidbox-react/lib/services/fhir';\nimport { mapSuccess } from 'aidbox-react/lib/services/service';\nimport { useState } from 'react';\nimport { Patient } from '../../types/aidbox';\n\nexport function usePatientsList() {\n    const [showPatientModal, setShowPatientModal] = useState(false);\n\n    const [patientsRD, manager] = useService(async () => {\n        const response = await getFHIRResources<Patient>('Patient', {\n            _sort: '-_lastUpdated',\n        });\n        return mapSuccess(response, (bundle) => {\n            return extractBundleResources(bundle).Patient;\n        });\n    }, []);\n\n    const reloadPatientsList = () => {\n        manager.reload();\n    };\n\n    return {\n        showPatientModal,\n        setShowPatientModal,\n        patientsRD,\n        reloadPatientsList,\n    };\n}\n")),(0,o.kt)("p",null,"Create styles for the ",(0,o.kt)("inlineCode",{parentName:"p"},"PatientsList"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scss"},".table {\n    margin: 0 10px;\n}\n")),(0,o.kt)("h3",{id:"observations-list"},"Observations list"),(0,o.kt)("p",null,"Let's update the ",(0,o.kt)("inlineCode",{parentName:"p"},"ObservationsList")," container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { RenderRemoteData } from 'aidbox-react/lib/components/RenderRemoteData';\nimport { Button, Space } from 'antd';\nimport { AlertFailure } from '../../components/AlertFailure';\nimport { AppHeader } from '../../components/AppHeader';\nimport { Loader } from '../../components/Loader';\nimport { ObservationsDetails } from '../../components/ObservationsDetails';\nimport { useObservationsList } from './hooks';\n\nexport function ObservationsList() {\n    const {\n        navigate,\n        showObservationModal,\n        setShowObservationModal,\n        patientObservationsMapRD,\n        reloadObservationsList,\n    } = useObservationsList();\n\n    return (\n        <>\n            <AppHeader>\n                <Space size=\"middle\">\n                    <Button onClick={() => setShowObservationModal(true)} type=\"primary\">\n                        Add observation\n                    </Button>\n                    <Button onClick={() => navigate('patients')}>Back</Button>\n                </Space>\n            </AppHeader>\n            <RenderRemoteData\n                remoteData={patientObservationsMapRD}\n                renderFailure={(error) => <AlertFailure error={error} />}\n                renderLoading={() => <Loader />}\n            >\n                {(data) => (\n                    <ObservationsDetails\n                        showObservationModal={showObservationModal}\n                        setShowObservationModal={setShowObservationModal}\n                        patient={data.patient}\n                        observationsList={data.observations}\n                        reloadObservationsList={reloadObservationsList}\n                    />\n                )}\n            </RenderRemoteData>\n        </>\n    );\n}\n")),(0,o.kt)("h3",{id:"getfhirresource"},(0,o.kt)("inlineCode",{parentName:"h3"},"getFHIRResource")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getFHIRResource")," is a function that is used to retrieve a single FHIR resource from a server. It takes an object as an argument, which should contain the resourceType of the resource being requested and the id of the specific resource. It returns a Promise that resolves to a ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteDataResult")," object."),(0,o.kt)("h3",{id:"sequencemap"},(0,o.kt)("inlineCode",{parentName:"h3"},"sequenceMap")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"sequenceMap")," is a function that takes an object containing ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," values as its argument, and returns a new ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," value that represents the combination of all of the input ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," values. If all of the input ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," values are successful, then the returned ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," value will be successful and will contain an object with the same keys as the input object, but with the successful data values as the values. If any of the input ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," values are not successful, then the returned ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," value will be not successful and will contain the error value of the first not successful input ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteData")," value."),(0,o.kt)("p",null,"Add ",(0,o.kt)("inlineCode",{parentName:"p"},"hooks.ts")," for ",(0,o.kt)("inlineCode",{parentName:"p"},"ObservationsList"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { useService } from 'aidbox-react/lib/hooks/service';\nimport {\n    extractBundleResources,\n    getFHIRResource,\n    getFHIRResources,\n} from 'aidbox-react/lib/services/fhir';\nimport { mapSuccess, sequenceMap } from 'aidbox-react/lib/services/service';\nimport { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Observation, Patient } from '../../types/aidbox';\n\nexport function useObservationsList() {\n    const navigate = useNavigate();\n\n    const { patientId } = useParams();\n\n    const [showObservationModal, setShowObservationModal] = useState(false);\n\n    const [patientRD] = useService(async () => {\n        const response = await getFHIRResource<Patient>({\n            resourceType: 'Patient',\n            id: patientId,\n        });\n        return response;\n    });\n\n    const [observationsRD, manager] = useService(async () => {\n        const response = await getFHIRResources<Observation>('Observation', {\n            _subject: patientId,\n            _sort: '-_lastUpdated',\n        });\n        return mapSuccess(response, (bundle) => {\n            return extractBundleResources(bundle).Observation;\n        });\n    }, []);\n\n    const reloadObservationsList = () => {\n        manager.reload();\n    };\n\n    const patientObservationsMapRD = sequenceMap({\n        patient: patientRD,\n        observations: observationsRD,\n    });\n\n    return {\n        navigate,\n        showObservationModal,\n        setShowObservationModal,\n        patientObservationsMapRD,\n        reloadObservationsList,\n    };\n}\n")),(0,o.kt)("h2",{id:"create-and-update-resources"},"Create and update resources"),(0,o.kt)("h3",{id:"aidbox-rest-console"},"Aidbox REST Console"),(0,o.kt)("p",null,"Let's add a ",(0,o.kt)("inlineCode",{parentName:"p"},"Patient")," resource via Aidbox REST console using ",(0,o.kt)("inlineCode",{parentName:"p"},"yaml")," format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"POST /fhir/Patient\naccept: text/yaml\ncontent-type: text/yaml\n\nid: pt-1\nname: [{family: 'John'}]\n")),(0,o.kt)("p",null,"We can also use ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," format, add ",(0,o.kt)("inlineCode",{parentName:"p"},"Observation")," for the patient using ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'POST /fhir/Observation\naccept: application/json\ncontent-type: application/json\n\n{\n    "status": "final",\n    "code": {\n        "coding": [\n            {\n                "system": "http://loinc.org",\n                "code": "718-7",\n                "display": "Hemoglobin [Mass/volume] in Blood"\n            }\n        ]\n    },\n    "effectiveDateTime": "2022-12-15T06:09:20.881Z",\n    "value": {\n        "Quantity": {\n            "value": 6,\n            "unit": "g/dL"\n        }\n    },\n    "subject": {\n        "reference": "Patient/pt-1",\n        "display": "John"\n    }\n}\n')),(0,o.kt)("p",null,"With the Aidbox REST console, we can also retrieve resources using a GET request.\nFor example, we can get ",(0,o.kt)("a",{parentName:"p",href:"https://www.hl7.org/fhir/bundle.html"},"Bundle")," patients by writing the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"GET /fhir/Patient?_format=yaml\n")),(0,o.kt)("h3",{id:"create-patient-resource"},"Create Patient resource"),(0,o.kt)("h3",{id:"savefhirresource"},(0,o.kt)("inlineCode",{parentName:"h3"},"saveFHIRResource")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"saveFHIRResource")," function is a utility function that allows create or update a FHIR resource in an Aidbox instance. It takes in a FHIR resource object and returns a Promise that resolves to a ",(0,o.kt)("inlineCode",{parentName:"p"},"RemoteDataResult")," object. "),(0,o.kt)("p",null,"Let's add a modal window component with a form to create the ",(0,o.kt)("inlineCode",{parentName:"p"},"Patient")," resource:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { isFailure, isSuccess } from 'aidbox-react/lib/libs/remoteData';\nimport { saveFHIRResource } from 'aidbox-react/lib/services/fhir';\nimport { Button, DatePicker, Form, Input, message, Modal, Select } from 'antd';\nimport { Patient } from '../../types/aidbox';\nimport { formatHumanDate } from '../../utils/date';\n\ninterface AddPatientModalProps {\n    showPatientModal: boolean;\n    setShowPatientModal: (showPatientModal: boolean) => void;\n    reloadPatientsList: () => void;\n}\n\nexport function AddPatientModal({\n    showPatientModal,\n    setShowPatientModal,\n    reloadPatientsList,\n}: AddPatientModalProps) {\n    const onFinish = async (values: { family: string; birthDate: string; gender: string }) => {\n        const patient = {\n            name: [\n                {\n                    use: 'official',\n                    family: values.family,\n                },\n            ],\n            birthDate: values.birthDate && formatHumanDate(values.birthDate),\n            resourceType: 'Patient' as 'Patient',\n            gender: values.gender,\n        };\n        const response = await saveFHIRResource<Patient>(patient);\n        if (isFailure(response)) {\n            message.error(response.error);\n        }\n        if (isSuccess(response)) {\n            message.success('Patient created');\n        }\n        reloadPatientsList();\n        setShowPatientModal(false);\n    };\n\n    return (\n        <Modal\n            title=\"Create patient\"\n            open={showPatientModal}\n            onCancel={() => setShowPatientModal(false)}\n            okButtonProps={{ style: { display: 'none' } }}\n            cancelButtonProps={{ style: { display: 'none' } }}\n        >\n            <Form onFinish={onFinish} labelCol={{ span: 6 }} wrapperCol={{ span: 20 }}>\n                <Form.Item\n                    required\n                    name=\"family\"\n                    label=\"Name\"\n                    rules={[{ required: true, message: 'Please enter a name' }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item name=\"birthDate\" label=\"Date of Birth\">\n                    <DatePicker format=\"MM-DD-YYYY\" />\n                </Form.Item>\n                <Form.Item name=\"gender\" label=\"Gender\">\n                    <Select>\n                        <Select.Option value=\"male\">Male</Select.Option>\n                        <Select.Option value=\"female\">Female</Select.Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item wrapperCol={{ offset: 6, span: 20 }}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                </Form.Item>\n            </Form>\n        </Modal>\n    );\n}\n")),(0,o.kt)("p",null,"The functions ",(0,o.kt)("inlineCode",{parentName:"p"},"isFailure")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"isSuccess")," are used to determine the status of the query result."),(0,o.kt)("p",null,"Let's change the ",(0,o.kt)("inlineCode",{parentName:"p"},"PatientsList")," container according to the parameters required for the ",(0,o.kt)("inlineCode",{parentName:"p"},"AddPatientModal")," component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { RenderRemoteData } from 'aidbox-react/lib/components/RenderRemoteData';\nimport { Button } from 'antd';\nimport { AddPatientModal } from '../../components/AddPatientsModal';\nimport { AlertFailure } from '../../components/AlertFailure';\nimport { AppHeader } from '../../components/AppHeader';\nimport { Loader } from '../../components/Loader';\nimport { PatientsListTable } from '../../components/PatientsListTable';\nimport { usePatientsList } from './hook';\nimport s from './PatientsList.module.scss';\n\nexport function PatientsList() {\n    const { showPatientModal, setShowPatientModal, patientsRD, reloadPatientsList } =\n        usePatientsList();\n\n    return (\n        <>\n            <AppHeader>\n                <Button\n                    key=\"create-patient\"\n                    onClick={() => setShowPatientModal(true)}\n                    type={'primary'}\n                >\n                    Create patient\n                </Button>\n            </AppHeader>\n            <AddPatientModal\n                showPatientModal={showPatientModal}\n                setShowPatientModal={setShowPatientModal}\n                reloadPatientsList={reloadPatientsList}\n            />\n            <RenderRemoteData\n                remoteData={patientsRD}\n                renderFailure={(error) => <AlertFailure error={error} />}\n                renderLoading={() => <Loader />}\n            >\n                {(data) => (\n                    <div className={s.table}>\n                        <PatientsListTable patientsList={data} />\n                    </div>\n                )}\n            </RenderRemoteData>\n        </>\n    );\n}\n")),(0,o.kt)("h3",{id:"create-observation-resource"},"Create Observation resource"),(0,o.kt)("p",null,"Let's add a modal window component with a form to create the ",(0,o.kt)("inlineCode",{parentName:"p"},"Observation")," resource:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { isFailure, isSuccess } from 'aidbox-react/lib/libs/remoteData';\nimport { saveFHIRResource } from 'aidbox-react/lib/services/fhir';\nimport { Button, DatePicker, Form, InputNumber, message, Modal } from 'antd';\nimport { Observation, Patient } from '../../types/aidbox';\n\ninterface AddObservationModalProps {\n    showObservationModal: boolean;\n    setShowObservationModal: (showObservationModal: boolean) => void;\n    patient: Patient;\n    reloadObservationsList: () => void;\n}\n\nexport function AddObservationModal({\n    showObservationModal,\n    setShowObservationModal,\n    patient,\n    reloadObservationsList,\n}: AddObservationModalProps) {\n    const onFinish = async (values: { dateTime: Date; value: number }) => {\n        const observation = {\n            status: 'final',\n            code: {\n                coding: [\n                    {\n                        system: 'http://loinc.org',\n                        code: '718-7',\n                        display: 'Hemoglobin [Mass/volume] in Blood',\n                    },\n                ],\n            },\n            effective: {\n                dateTime: new Date(values.dateTime).toISOString(),\n            },\n            value: {\n                Quantity: {\n                    value: values.value,\n                    unit: 'g/dL',\n                },\n            },\n            subject: {\n                id: `${patient.id}`,\n                display: `${patient.name?.[0].family}`,\n                resourceType: 'Patient' as 'Patient',\n            },\n            resourceType: 'Observation' as 'Observation',\n        };\n        const response = await saveFHIRResource<Observation>(observation);\n        if (isFailure(response)) {\n            message.error(response.error);\n        }\n        if (isSuccess(response)) {\n            message.success('Observation added');\n        }\n        reloadObservationsList();\n        setShowObservationModal(false);\n    };\n\n    return (\n        <Modal\n            title=\"Add observation\"\n            open={showObservationModal}\n            onCancel={() => setShowObservationModal(false)}\n            okButtonProps={{ style: { display: 'none' } }}\n            cancelButtonProps={{ style: { display: 'none' } }}\n        >\n            <Form onFinish={onFinish} labelCol={{ span: 4 }} wrapperCol={{ span: 20 }}>\n                <Form.Item\n                    name=\"value\"\n                    label=\"Value\"\n                    rules={[{ required: true, message: 'Please enter a value' }]}\n                >\n                    <InputNumber addonAfter=\"g/dL\" />\n                </Form.Item>\n                <Form.Item\n                    name=\"dateTime\"\n                    label=\"Date\"\n                    rules={[{ required: true, message: 'Please enter a date and time' }]}\n                >\n                    <DatePicker showTime format=\"MM-DD-YYYY HH:mm\" />\n                </Form.Item>\n                <Form.Item wrapperCol={{ offset: 4, span: 20 }}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                </Form.Item>\n            </Form>\n        </Modal>\n    );\n}\n")),(0,o.kt)("p",null,"Update ",(0,o.kt)("inlineCode",{parentName:"p"},"ObservationsDetails")," according to the parameters of the ",(0,o.kt)("inlineCode",{parentName:"p"},"AddObservationModal")," component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Space, Typography } from 'antd';\nimport { Observation, Patient } from '../../types/aidbox';\nimport { AddObservationModal } from '../AddObservationModal';\nimport { ObservationsListTable } from '../ObservationsListTable';\nimport s from './ObservationsDetails.module.scss';\n\ninterface ObservationsDetailsProps {\n    showObservationModal: boolean;\n    setShowObservationModal: (showObservationModal: boolean) => void;\n    patient: Patient;\n    observationsList: Observation[];\n    reloadObservationsList: () => void;\n}\n\nexport function ObservationsDetails({\n    showObservationModal,\n    setShowObservationModal,\n    patient,\n    observationsList,\n    reloadObservationsList,\n}: ObservationsDetailsProps) {\n    const { Text } = Typography;\n\n    return (\n        <>\n            <AddObservationModal\n                showObservationModal={showObservationModal}\n                setShowObservationModal={setShowObservationModal}\n                patient={patient}\n                reloadObservationsList={reloadObservationsList}\n            />\n            <Space size=\"middle\" className={s.space}>\n                <Text code>patient: {patient.name?.[0].family}</Text>\n                <Text code>code: Hemoglobin [Mass/volume] in Blood (LOINC#718-7)</Text>\n            </Space>\n            <div className={s.table}>\n                <ObservationsListTable observationsList={observationsList} />\n            </div>\n        </>\n    );\n}\n")),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"In this tutorial, we have tried to create a solid foundation for using ",(0,o.kt)("inlineCode",{parentName:"p"},"aidbox-react")," to develop stable and scalable healthcare applications. Using the tutorial, we learned how to create a small MVP application and became familiar with the basic methods and features offered by the ",(0,o.kt)("inlineCode",{parentName:"p"},"aidbox-react")," library. These tools allowed us to easily retrieve and manipulate data from the aidbox server, simplifying the process of building our application."))}c.isMDXComponent=!0}}]);